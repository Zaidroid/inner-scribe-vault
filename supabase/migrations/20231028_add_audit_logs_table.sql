-- Create the audit_logs table
CREATE TABLE public.audit_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id),
    event_type TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add comments to the table and columns
COMMENT ON TABLE public.audit_logs IS 'Stores audit trail for sensitive user actions.';
COMMENT ON COLUMN public.audit_logs.event_type IS 'The type of event that occurred (e.g., "user_login_failed", "backup_restored").';
COMMENT ON COLUMN public.audit_logs.metadata IS 'Additional JSON data related to the event.';

-- Enable Row Level Security
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
-- Users can only see their own audit logs.
CREATE POLICY "Users can view their own audit logs"
ON public.audit_logs
FOR SELECT USING (auth.uid() = user_id);

-- Service roles can insert logs (since our logger uses the service key).
-- This assumes the logger is called from a secure backend environment.
-- Since we are calling from the client, we need a policy that allows users to insert their own logs.
CREATE POLICY "Users can insert their own audit logs"
ON public.audit_logs
FOR INSERT WITH CHECK (auth.uid() = user_id); 