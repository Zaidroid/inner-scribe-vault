
interface ObsidianConfig {
  vaultPath: string;
  enabled: boolean;
}

export class ObsidianIntegration {
  private config: ObsidianConfig;

  constructor(config: ObsidianConfig) {
    this.config = config;
  }

  async syncJournalEntry(entry: any): Promise<boolean> {
    if (!this.config.enabled || !this.config.vaultPath) {
      return false;
    }

    try {
      // Format the entry as markdown
      const markdown = this.formatEntryAsMarkdown(entry);
      const fileName = `${entry.date}-${entry.title.replace(/[^a-zA-Z0-9]/g, '-')}.md`;
      
      // In a real implementation, this would use the File System Access API
      // or a browser extension to write to the Obsidian vault
      console.log('Would sync to Obsidian:', { fileName, markdown });
      
      // For now, we'll just download the file
      this.downloadMarkdownFile(fileName, markdown);
      
      return true;
    } catch (error) {
      console.error('Obsidian sync failed:', error);
      return false;
    }
  }

  private formatEntryAsMarkdown(entry: any): string {
    const tags = entry.tags.map((tag: string) => `#${tag}`).join(' ');
    const moodEmoji = this.getMoodEmoji(entry.mood);
    
    return `---
title: ${entry.title}
date: ${entry.date}
mood: ${entry.mood}
tags: [${entry.tags.map((tag: string) => `"${tag}"`).join(', ')}]
---

# ${entry.title}

**Date:** ${new Date(entry.date).toLocaleDateString()}
**Mood:** ${moodEmoji} ${entry.mood}
**Tags:** ${tags}

## Content

${entry.content}

---
*Generated by SelfMastery App*
`;
  }

  private getMoodEmoji(mood: string): string {
    const moodMap: { [key: string]: string } = {
      'great': '😊',
      'good': '🙂',
      'okay': '😐',
      'bad': '😔',
      'terrible': '😢',
    };
    return moodMap[mood] || '😐';
  }

  private downloadMarkdownFile(fileName: string, content: string) {
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  updateConfig(config: Partial<ObsidianConfig>) {
    this.config = { ...this.config, ...config };
  }
}

export const obsidianSync = new ObsidianIntegration({
  vaultPath: '',
  enabled: false,
});
